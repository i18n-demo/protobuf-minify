// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: _.proto
/* eslint-disable */

import * as _P from "@3-/protoscript";

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ERR_CODE_USER = 0;
export const ERR_CODE_CAPTCHA_ERR = 1;
export const ERR_CODE_FORM = 2;

/**
 * Serializes Call to protobuf.
 */
export const CallEncode = (msg) =>
  _P.getResultBuffer(CallWrite(msg, _P.binaryWriter()));
/**
 * Deserializes Call from protobuf.
 */
export const CallDecode = (bytes) =>
  CallRead(CallNew(), _P.binaryReader(bytes));
const CallNew = () => [0, _P.EMPTY_BIN];
const CallWrite = _P.encoder(_P.writeInt32, _P.writeBytes);
const CallRead = (msg, reader) => {
  while (_P.nextField(reader)) {
    switch (_P.getFieldNumber(reader)) {
      case 1: {
        msg[0] = _P.readInt32(reader);
        break;
      }
      case 2: {
        msg[1] = _P.readBytes(reader);
        break;
      }
      default: {
        _P.skipField(reader);
        break;
      }
    }
  }
  return msg;
};
/**
 * Serializes CallLi to protobuf.
 */
export const CallLiEncode = (msg) =>
  _P.getResultBuffer(CallLiWrite(msg, _P.binaryWriter()));
/**
 * Deserializes CallLi from protobuf.
 */
export const CallLiDecode = (bytes) =>
  CallLiRead(CallLiNew(), _P.binaryReader(bytes));
const CallLiNew = () => [];
const CallLiWrite = _P.encoder1(_P.writeRepeatedMessage(CallWrite));
const CallLiRead = (msg, reader) => {
  while (_P.nextField(reader)) {
    switch (_P.getFieldNumber(reader)) {
      case 1: {
        const m = CallNew();
        _P.readMessage(reader, m, CallRead);
        msg.push(m);
        break;
      }
      default: {
        _P.skipField(reader);
        break;
      }
    }
  }
  return msg;
};
/**
 * Serializes BinLi to protobuf.
 */
export const BinLiEncode = (msg) =>
  _P.getResultBuffer(BinLiWrite(msg, _P.binaryWriter()));
/**
 * Deserializes BinLi from protobuf.
 */
export const BinLiDecode = (bytes) =>
  BinLiRead(BinLiNew(), _P.binaryReader(bytes));
const BinLiNew = () => [];
const BinLiWrite = _P.encoder1(_P.writeRepeatedBytes);
const BinLiRead = (msg, reader) => {
  while (_P.nextField(reader)) {
    switch (_P.getFieldNumber(reader)) {
      case 1: {
        msg.push(_P.readBytes(reader));
        break;
      }
      default: {
        _P.skipField(reader);
        break;
      }
    }
  }
  return msg;
};
/**
 * Serializes FormErr to protobuf.
 */
export const FormErrEncode = (msg) =>
  _P.getResultBuffer(FormErrWrite(msg, _P.binaryWriter()));
/**
 * Deserializes FormErr from protobuf.
 */
export const FormErrDecode = (bytes) =>
  FormErrRead(FormErrNew(), _P.binaryReader(bytes));
const FormErrNew = () => [0];
const FormErrWrite = _P.encoder(_P.writeUint32, _P.writeBytes);
const FormErrRead = (msg, reader) => {
  while (_P.nextField(reader)) {
    switch (_P.getFieldNumber(reader)) {
      case 1: {
        msg[0] = _P.readUint32(reader);
        break;
      }
      case 2: {
        msg[1] = _P.readBytes(reader);
        break;
      }
      default: {
        _P.skipField(reader);
        break;
      }
    }
  }
  return msg;
};
/**
 * Serializes FormErrLi to protobuf.
 */
export const FormErrLiEncode = (msg) =>
  _P.getResultBuffer(FormErrLiWrite(msg, _P.binaryWriter()));
/**
 * Deserializes FormErrLi from protobuf.
 */
export const FormErrLiDecode = (bytes) =>
  FormErrLiRead(FormErrLiNew(), _P.binaryReader(bytes));
const FormErrLiNew = () => [];
const FormErrLiWrite = _P.encoder1(_P.writeRepeatedMessage(FormErrWrite));
const FormErrLiRead = (msg, reader) => {
  while (_P.nextField(reader)) {
    switch (_P.getFieldNumber(reader)) {
      case 1: {
        const m = FormErrNew();
        _P.readMessage(reader, m, FormErrRead);
        msg.push(m);
        break;
      }
      default: {
        _P.skipField(reader);
        break;
      }
    }
  }
  return msg;
};
/**
 * Serializes ErrMsg to protobuf.
 */
export const ErrMsgEncode = (msg) =>
  _P.getResultBuffer(ErrMsgWrite(msg, _P.binaryWriter()));
/**
 * Deserializes ErrMsg from protobuf.
 */
export const ErrMsgDecode = (bytes) =>
  ErrMsgRead(ErrMsgNew(), _P.binaryReader(bytes));
const ErrMsgNew = () => [0, _P.EMPTY_BIN];
const ErrMsgWrite = _P.encoder(_P.writeEnum, _P.writeBytes);
const ErrMsgRead = (msg, reader) => {
  while (_P.nextField(reader)) {
    switch (_P.getFieldNumber(reader)) {
      case 1: {
        msg[0] = _P.readEnum(reader);
        break;
      }
      case 2: {
        msg[1] = _P.readBytes(reader);
        break;
      }
      default: {
        _P.skipField(reader);
        break;
      }
    }
  }
  return msg;
};
/**
 * Serializes SignupMailArgs to protobuf.
 */
export const SignupMailArgsEncode = (msg) =>
  _P.getResultBuffer(SignupMailArgsWrite(msg, _P.binaryWriter()));
/**
 * Deserializes SignupMailArgs from protobuf.
 */
export const SignupMailArgsDecode = (bytes) =>
  SignupMailArgsRead(SignupMailArgsNew(), _P.binaryReader(bytes));
const SignupMailArgsNew = () => ["", ""];
const SignupMailArgsWrite = _P.encoder(_P.writeString, _P.writeString);
const SignupMailArgsRead = (msg, reader) => {
  while (_P.nextField(reader)) {
    switch (_P.getFieldNumber(reader)) {
      case 1: {
        msg[0] = _P.readString(reader);
        break;
      }
      case 2: {
        msg[1] = _P.readString(reader);
        break;
      }
      default: {
        _P.skipField(reader);
        break;
      }
    }
  }
  return msg;
};
/**
 * Serializes SignupMailVerifyArgs to protobuf.
 */
export const SignupMailVerifyArgsEncode = (msg) =>
  _P.getResultBuffer(SignupMailVerifyArgsWrite(msg, _P.binaryWriter()));
/**
 * Deserializes SignupMailVerifyArgs from protobuf.
 */
export const SignupMailVerifyArgsDecode = (bytes) =>
  SignupMailVerifyArgsRead(SignupMailVerifyArgsNew(), _P.binaryReader(bytes));
const SignupMailVerifyArgsNew = () => ["", ""];
const SignupMailVerifyArgsWrite = _P.encoder(_P.writeString, _P.writeString);
const SignupMailVerifyArgsRead = (msg, reader) => {
  while (_P.nextField(reader)) {
    switch (_P.getFieldNumber(reader)) {
      case 1: {
        msg[0] = _P.readString(reader);
        break;
      }
      case 2: {
        msg[1] = _P.readString(reader);
        break;
      }
      default: {
        _P.skipField(reader);
        break;
      }
    }
  }
  return msg;
};
/**
 * Serializes Captcha to protobuf.
 */
export const CaptchaEncode = (msg) =>
  _P.getResultBuffer(CaptchaWrite(msg, _P.binaryWriter()));
/**
 * Deserializes Captcha from protobuf.
 */
export const CaptchaDecode = (bytes) =>
  CaptchaRead(CaptchaNew(), _P.binaryReader(bytes));
const CaptchaNew = () => [_P.EMPTY_BIN, _P.EMPTY_BIN, _P.EMPTY_BIN];
const CaptchaWrite = _P.encoder(_P.writeBytes, _P.writeBytes, _P.writeBytes);
const CaptchaRead = (msg, reader) => {
  while (_P.nextField(reader)) {
    switch (_P.getFieldNumber(reader)) {
      case 1: {
        msg[0] = _P.readBytes(reader);
        break;
      }
      case 2: {
        msg[1] = _P.readBytes(reader);
        break;
      }
      case 3: {
        msg[2] = _P.readBytes(reader);
        break;
      }
      default: {
        _P.skipField(reader);
        break;
      }
    }
  }
  return msg;
};
