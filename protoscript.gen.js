// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: _.proto
/* eslint-disable */

import * as protoscript from "protoscript";

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ErrCode = {
  User: "User",
  CaptchaErr: "CaptchaErr",
  Form: "Form",
  /**
   * @private
   */
  _fromInt: function (i) {
    switch (i) {
      case 0: {
        return "User";
      }
      case 1: {
        return "CaptchaErr";
      }
      case 2: {
        return "Form";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i) {
    switch (i) {
      case "User": {
        return 0;
      }
      case "CaptchaErr": {
        return 1;
      }
      case "Form": {
        return 2;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i;
      }
    }
  },
};

export const Call = {
  /**
   * Serializes Call to protobuf.
   */
  encode: function (msg) {
    return Call._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Call from protobuf.
   */
  decode: function (bytes) {
    return Call._readMessage(
      Call.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Call with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      func: 0,
      args: new Uint8Array(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.func) {
      writer.writeInt32(1, msg.func);
    }
    if (msg.args?.length) {
      writer.writeBytes(2, msg.args);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.func = reader.readInt32();
          break;
        }
        case 2: {
          msg.args = reader.readBytes();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CallLi = {
  /**
   * Serializes CallLi to protobuf.
   */
  encode: function (msg) {
    return CallLi._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CallLi from protobuf.
   */
  decode: function (bytes) {
    return CallLi._readMessage(
      CallLi.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CallLi with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      callLi: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.callLi?.length) {
      writer.writeRepeatedMessage(1, msg.callLi, Call._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Call.initialize();
          reader.readMessage(m, Call._readMessage);
          msg.callLi.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const BinLi = {
  /**
   * Serializes BinLi to protobuf.
   */
  encode: function (msg) {
    return BinLi._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes BinLi from protobuf.
   */
  decode: function (bytes) {
    return BinLi._readMessage(
      BinLi.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes BinLi with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      binLi: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.binLi?.length) {
      writer.writeRepeatedBytes(1, msg.binLi);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.binLi.push(reader.readBytes());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FormErr = {
  /**
   * Serializes FormErr to protobuf.
   */
  encode: function (msg) {
    return FormErr._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FormErr from protobuf.
   */
  decode: function (bytes) {
    return FormErr._readMessage(
      FormErr.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FormErr with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      code: 0,
      bin: undefined,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.code) {
      writer.writeUint32(1, msg.code);
    }
    if (msg.bin?.length) {
      writer.writeBytes(2, msg.bin);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.code = reader.readUint32();
          break;
        }
        case 2: {
          msg.bin = reader.readBytes();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FormErrLi = {
  /**
   * Serializes FormErrLi to protobuf.
   */
  encode: function (msg) {
    return FormErrLi._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FormErrLi from protobuf.
   */
  decode: function (bytes) {
    return FormErrLi._readMessage(
      FormErrLi.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FormErrLi with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      formErrLi: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.formErrLi?.length) {
      writer.writeRepeatedMessage(1, msg.formErrLi, FormErr._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = FormErr.initialize();
          reader.readMessage(m, FormErr._readMessage);
          msg.formErrLi.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ErrMsg = {
  /**
   * Serializes ErrMsg to protobuf.
   */
  encode: function (msg) {
    return ErrMsg._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ErrMsg from protobuf.
   */
  decode: function (bytes) {
    return ErrMsg._readMessage(
      ErrMsg.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ErrMsg with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      errCode: ErrCode._fromInt(0),
      bin: new Uint8Array(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.errCode && ErrCode._toInt(msg.errCode)) {
      writer.writeEnum(1, ErrCode._toInt(msg.errCode));
    }
    if (msg.bin?.length) {
      writer.writeBytes(2, msg.bin);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.errCode = ErrCode._fromInt(reader.readEnum());
          break;
        }
        case 2: {
          msg.bin = reader.readBytes();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SignupMailArgs = {
  /**
   * Serializes SignupMailArgs to protobuf.
   */
  encode: function (msg) {
    return SignupMailArgs._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SignupMailArgs from protobuf.
   */
  decode: function (bytes) {
    return SignupMailArgs._readMessage(
      SignupMailArgs.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SignupMailArgs with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      address: "",
      password: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.address) {
      writer.writeString(1, msg.address);
    }
    if (msg.password) {
      writer.writeString(2, msg.password);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.address = reader.readString();
          break;
        }
        case 2: {
          msg.password = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SignupMailVerifyArgs = {
  /**
   * Serializes SignupMailVerifyArgs to protobuf.
   */
  encode: function (msg) {
    return SignupMailVerifyArgs._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SignupMailVerifyArgs from protobuf.
   */
  decode: function (bytes) {
    return SignupMailVerifyArgs._readMessage(
      SignupMailVerifyArgs.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SignupMailVerifyArgs with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      address: "",
      code: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.address) {
      writer.writeString(1, msg.address);
    }
    if (msg.code) {
      writer.writeString(2, msg.code);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.address = reader.readString();
          break;
        }
        case 2: {
          msg.code = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Captcha = {
  /**
   * Serializes Captcha to protobuf.
   */
  encode: function (msg) {
    return Captcha._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Captcha from protobuf.
   */
  decode: function (bytes) {
    return Captcha._readMessage(
      Captcha.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Captcha with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      id: new Uint8Array(),
      img: new Uint8Array(),
      tip: new Uint8Array(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.id?.length) {
      writer.writeBytes(1, msg.id);
    }
    if (msg.img?.length) {
      writer.writeBytes(2, msg.img);
    }
    if (msg.tip?.length) {
      writer.writeBytes(3, msg.tip);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readBytes();
          break;
        }
        case 2: {
          msg.img = reader.readBytes();
          break;
        }
        case 3: {
          msg.tip = reader.readBytes();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ErrCodeJSON = {
  User: "User",
  CaptchaErr: "CaptchaErr",
  Form: "Form",
  /**
   * @private
   */
  _fromInt: function (i) {
    switch (i) {
      case 0: {
        return "User";
      }
      case 1: {
        return "CaptchaErr";
      }
      case 2: {
        return "Form";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i) {
    switch (i) {
      case "User": {
        return 0;
      }
      case "CaptchaErr": {
        return 1;
      }
      case "Form": {
        return 2;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i;
      }
    }
  },
};

export const CallJSON = {
  /**
   * Serializes Call to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(CallJSON._writeMessage(msg));
  },

  /**
   * Deserializes Call from JSON.
   */
  decode: function (json) {
    return CallJSON._readMessage(CallJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Call with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      func: 0,
      args: new Uint8Array(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.func) {
      json["func"] = msg.func;
    }
    if (msg.args?.length) {
      json["args"] = protoscript.serializeBytes(msg.args);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _func_ = json["func"];
    if (_func_) {
      msg.func = protoscript.parseNumber(_func_);
    }
    const _args_ = json["args"];
    if (_args_) {
      msg.args = protoscript.parseBytes(_args_);
    }
    return msg;
  },
};

export const CallLiJSON = {
  /**
   * Serializes CallLi to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(CallLiJSON._writeMessage(msg));
  },

  /**
   * Deserializes CallLi from JSON.
   */
  decode: function (json) {
    return CallLiJSON._readMessage(CallLiJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes CallLi with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      callLi: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.callLi?.length) {
      json["callLi"] = msg.callLi.map(CallJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _callLi_ = json["callLi"] ?? json["call_li"];
    if (_callLi_) {
      for (const item of _callLi_) {
        const m = CallJSON.initialize();
        CallJSON._readMessage(m, item);
        msg.callLi.push(m);
      }
    }
    return msg;
  },
};

export const BinLiJSON = {
  /**
   * Serializes BinLi to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(BinLiJSON._writeMessage(msg));
  },

  /**
   * Deserializes BinLi from JSON.
   */
  decode: function (json) {
    return BinLiJSON._readMessage(BinLiJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes BinLi with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      binLi: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.binLi?.length) {
      json["binLi"] = msg.binLi.map(protoscript.serializeBytes);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _binLi_ = json["binLi"] ?? json["bin_li"];
    if (_binLi_) {
      msg.binLi = _binLi_.map(protoscript.parseBytes);
    }
    return msg;
  },
};

export const FormErrJSON = {
  /**
   * Serializes FormErr to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(FormErrJSON._writeMessage(msg));
  },

  /**
   * Deserializes FormErr from JSON.
   */
  decode: function (json) {
    return FormErrJSON._readMessage(FormErrJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes FormErr with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      code: 0,
      bin: undefined,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.code) {
      json["code"] = msg.code;
    }
    if (msg.bin?.length) {
      json["bin"] = protoscript.serializeBytes(msg.bin);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _code_ = json["code"];
    if (_code_) {
      msg.code = protoscript.parseNumber(_code_);
    }
    const _bin_ = json["bin"];
    if (_bin_) {
      msg.bin = protoscript.parseBytes(_bin_);
    }
    return msg;
  },
};

export const FormErrLiJSON = {
  /**
   * Serializes FormErrLi to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(FormErrLiJSON._writeMessage(msg));
  },

  /**
   * Deserializes FormErrLi from JSON.
   */
  decode: function (json) {
    return FormErrLiJSON._readMessage(
      FormErrLiJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FormErrLi with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      formErrLi: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.formErrLi?.length) {
      json["formErrLi"] = msg.formErrLi.map(FormErrJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _formErrLi_ = json["formErrLi"] ?? json["form_err_li"];
    if (_formErrLi_) {
      for (const item of _formErrLi_) {
        const m = FormErrJSON.initialize();
        FormErrJSON._readMessage(m, item);
        msg.formErrLi.push(m);
      }
    }
    return msg;
  },
};

export const ErrMsgJSON = {
  /**
   * Serializes ErrMsg to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(ErrMsgJSON._writeMessage(msg));
  },

  /**
   * Deserializes ErrMsg from JSON.
   */
  decode: function (json) {
    return ErrMsgJSON._readMessage(ErrMsgJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes ErrMsg with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      errCode: ErrCode._fromInt(0),
      bin: new Uint8Array(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.errCode && ErrCodeJSON._toInt(msg.errCode)) {
      json["errCode"] = msg.errCode;
    }
    if (msg.bin?.length) {
      json["bin"] = protoscript.serializeBytes(msg.bin);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _errCode_ = json["errCode"] ?? json["err_code"];
    if (_errCode_) {
      msg.errCode = ErrCode._fromInt(_errCode_);
    }
    const _bin_ = json["bin"];
    if (_bin_) {
      msg.bin = protoscript.parseBytes(_bin_);
    }
    return msg;
  },
};

export const SignupMailArgsJSON = {
  /**
   * Serializes SignupMailArgs to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(SignupMailArgsJSON._writeMessage(msg));
  },

  /**
   * Deserializes SignupMailArgs from JSON.
   */
  decode: function (json) {
    return SignupMailArgsJSON._readMessage(
      SignupMailArgsJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SignupMailArgs with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      address: "",
      password: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.address) {
      json["address"] = msg.address;
    }
    if (msg.password) {
      json["password"] = msg.password;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _address_ = json["address"];
    if (_address_) {
      msg.address = _address_;
    }
    const _password_ = json["password"];
    if (_password_) {
      msg.password = _password_;
    }
    return msg;
  },
};

export const SignupMailVerifyArgsJSON = {
  /**
   * Serializes SignupMailVerifyArgs to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(SignupMailVerifyArgsJSON._writeMessage(msg));
  },

  /**
   * Deserializes SignupMailVerifyArgs from JSON.
   */
  decode: function (json) {
    return SignupMailVerifyArgsJSON._readMessage(
      SignupMailVerifyArgsJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SignupMailVerifyArgs with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      address: "",
      code: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.address) {
      json["address"] = msg.address;
    }
    if (msg.code) {
      json["code"] = msg.code;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _address_ = json["address"];
    if (_address_) {
      msg.address = _address_;
    }
    const _code_ = json["code"];
    if (_code_) {
      msg.code = _code_;
    }
    return msg;
  },
};

export const CaptchaJSON = {
  /**
   * Serializes Captcha to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(CaptchaJSON._writeMessage(msg));
  },

  /**
   * Deserializes Captcha from JSON.
   */
  decode: function (json) {
    return CaptchaJSON._readMessage(CaptchaJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Captcha with all fields set to their default value.
   */
  initialize: function (msg) {
    return {
      id: new Uint8Array(),
      img: new Uint8Array(),
      tip: new Uint8Array(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.id?.length) {
      json["id"] = protoscript.serializeBytes(msg.id);
    }
    if (msg.img?.length) {
      json["img"] = protoscript.serializeBytes(msg.img);
    }
    if (msg.tip?.length) {
      json["tip"] = protoscript.serializeBytes(msg.tip);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = protoscript.parseBytes(_id_);
    }
    const _img_ = json["img"];
    if (_img_) {
      msg.img = protoscript.parseBytes(_img_);
    }
    const _tip_ = json["tip"];
    if (_tip_) {
      msg.tip = protoscript.parseBytes(_tip_);
    }
    return msg;
  },
};
